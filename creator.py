import np_utils
import numpy as np
from music21 import instrument, note, chord, stream

from serializer import Serializer

print("reading midi files...")

ser = Serializer()
notes = ser.notes
pitchnames = ser.pitchnames
note_to_int = ser.note_to_int
n_vocab = ser.n_vocab

print("readed all files!")

sequence_length = 100

network_input = []

print("creating inputs...")

# create input sequences and the corresponding outputs
for i in range(0, len(notes) - sequence_length, 1):
    sequence_in = notes[i:i + sequence_length]
    sequence_out = notes[i + sequence_length]
    network_input.append([note_to_int[char] for char in sequence_in])

print("created!")

n_patterns = len(network_input)

# reshape the input into a format compatible with LSTM layers
network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
network_input = network_input / float(n_vocab) # normalize input

print("building model...")

# build a keras model
from krmodel import make_model
model = make_model(network_input.shape, n_vocab)

# load the wieghts to each node
model.load_weights("weights/weights-improvement-07-4.6263-bigger.hdf5")

print("builded!\nnow generating music...")

start = np.random.randint(0, len(network_input) - 1)

int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

pattern = network_input[start] * float(n_vocab)
prediction_output = []

# generate 500 notes
for note_index in range(500):
    prediction_input = np.reshape(pattern, (1, len(pattern), 1))
    prediction_input = prediction_input / float(n_vocab)

    prediction = model.predict(prediction_input, verbose=0)

    # index = np.argmax(prediction)
    index = np.argsort(prediction[0])[np.random.randint(len(prediction[0]) - 5, len(prediction[0]) - 1)]
    print(index, end=" ")
    result = int_to_note[index]
    prediction_output.append(result)

    pattern = np.append(pattern[1:len(pattern)], [index])

offset = 0.0
output_notes = []

# create note and chord objects based on the values generated by the model
for pattern in prediction_output:
    # pattern is a chord
    if ("." in pattern) or pattern.isdigit():
        notes_in_chord = pattern.split(".")
        notes = []
        for current_note in notes_in_chord:
            new_note = note.Note(int(current_note))
            new_note.storedInstrument = instrument.Piano()
            notes.append(new_note)
        new_chord = chord.Chord(notes)
        new_chord.offset = offset
        output_notes.append(new_chord)
    else: # pattern is a note
        new_note = note.Note(pattern)
        new_note.offset = offset
        new_note.storedInstrument = instrument.Piano()
        output_notes.append(new_note)
    
    offset += 0.5

print("output notes generated")

midi_stream = stream.Stream(output_notes)
midi_stream.write("midi", fp="test_output2.midi")

print("midi generated!")
